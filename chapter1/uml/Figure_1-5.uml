@startuml
abstract class IntegralPortfolio {
}

class DirectSummation {
   dx: double

   getDx(): double
}

class SimpsonsRule {
   n: integer

   getN(): integer
}

class RombergsMethod {
   n: integer
   m: integer

   getN(): integer
   getM(): integer
}

interface IntegralV2 {
   calculate(Function<Double,Double>f, double a, double b, 
                     IntegralPortfolio spec): double
}

IntegralPortfolio <|-- DirectSummation
IntegralPortfolio <|-- SimpsonsRule
IntegralPortfolio <|- RombergsMethod

IntegralPortfolio "many" -- "1" IntegralV2 : specifies >
@enduml